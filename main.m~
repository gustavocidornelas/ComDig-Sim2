%% Simulação 2 de ComDig - Universidade de Brasília
% Alunos: Caio Fábio, Gustavo Cid e Lucas Baião
%
% Julho de 2017

%% Definições iniciais
MaxEb_N0_dB = 12; % Valor máximo de Eb/N0 em dB (simulação de 0 dB até MaxEb_N0_dB)

N = 3; % Para o SC-FDE. Quantidade de símbolos por bloco
G = 1; % Para o SC-FDE. Tamanho do prefixo cíclico

Eb = 1/2; % Para que Es = 1
Eb_N0_dB = [0:MaxEb_N0_dB]; % Vetor de Eb/N0
Eb_N0_W = 10.^(Eb_N0_dB/10); % Eb/N0 em W
N0 = Eb./(Eb_N0_W); % Vetor com os valores de N0 em W/Hz

BER = zeros(1, MaxEb_N0_dB); % Vetor que armazena as taxas de erro de bit para cada Eb/N0

%% Escolha do canal
% Escolha feita a partir do valor da variável scenario. 
%       scenario = 1: Canal AWGN
%       scenario = 2: Canal h[k] = (1/sqrt(2))*delta[k] + (j/2)*delta[k-1] - (1/2)*delta[k-2] sem equalização
%       scenario = 3: SC-FDE 
scenario = 3; 

%% Gerando os bits
%numBits = 64; % Sequência de 100.000 bits aleatórios 
%bits = genBits(numBits); % Vetor de bits
bits = [0 0 0 1 1 0 1 1 0 0 0 1 1 0 1 1 0 0]; % teste

%% Mapeando a sequência de bits em símbolos QPSK
[symbols, compareVector] = MapperQPSK(bits, Eb); % Vetor de símbolos QPSK

%% Enviando a sequência de símboloso pelo canal e calculando a BER

for i = 0:1:MaxEb_N0_dB
    if scenario == 1
       receivedSignal = AWGNChannel(symbols, N0(i+1)); % Sinal após o canal AWGN 
    
    elseif scenario == 2
        receivedSignal = hChannel(symbols, N0(i+1)); % Sinal após o canal h[k] com multipercursos
    
    elseif scenario == 3
        scSymbol = SC_FDE_Symbols(symbols, N, G); % Contrução dos símbolos SC-FDE
        
        receivedSignal = hChannel(symbols, N0(i+1)); % Sinal após o canal h[k] com multipercursos
        
        receivedSignal = SC_FDE_RemoveCP(receivedSignal, N, G); % Remoção do prefixo cíclico
    end
    
    estimatedSymbols = decideSymbol(receivedSignal, compareVector); % Símbolos estimados

    estimatedBits = DeMapperQPSK(estimatedSymbols, compareVector); % Sequência de bits estimada
    
    BER(i+1) = ber(bits, estimatedBits); % Comparação entre os bits originais e os estimados
end

%% Plotando os resultados

plotResults(BER, Eb_N0_dB, scenario);

